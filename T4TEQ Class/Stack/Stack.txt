/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
// Stack -> LIFO
// Operations -> push, pop
// Element -> Top
import java.util.Scanner;
class Stk{
    int top;
    char[] ar = new char[10];
    Stk(){
        top = -1;
    }
    void push(char data){
        if(top  >= 10){
            System.out.print("Oveflow");
            return;
        }
        top++;
        ar[top] = data;
    }
    char pop(){
        if(top == -1){
            System.out.print("Underflow");
            return '\0';
        }
        char val = ar[top];
        top--;
        return val;
    }
    boolean isEmpty(){
        return top == -1;
    }
    void show(){
        // for(int i: ar){
        //     System.out.print(i + " ");
        // }
        // System.out.println();
        for(int i=0;i<=top;i++){
            System.out.print(ar[i] + " ");
        }
        System.out.println("\n");
    }
}

public class Main
{
    static char op[] = {'+','-','*','/','%','(',')'};
    static int prio(char ch){
        if(ch == '+' || ch == '-'){
            return 1;
        }
        else if(ch == '*' || ch == '/' || ch == '%'){
            return 2;
        }
        else{
            return 3;
        }
    }
    static boolean isOperator(char ch){
        for(int i = 0; i < op.length; i++){
            if(ch == op[i]){
                return true;
            }
        }
        return false;
    }
	public static void main(String[] args) {
	    Stk s1 = new Stk();
	    Scanner sc = new Scanner(System.in);
	    String inf = sc.next(),pst = "";
	    char[] ch = inf.toCharArray();
	    char last;
	    int i;
	    for(i=0;i<ch.length;i++){
	        if(isOperator(ch[i])){
	            if(ch[i] == '('){
	            if(s1.isEmpty()){
	                s1.push(ch[i]);
	            }
	            else{
	                last = s1.pop();
	                if(prio(last) < prio(ch[i])){
	                    s1.push(last);
	                    s1.push(ch[i]);
	                }
	                else{
	                    pst += last;
	                    s1.push(ch[i]);
	                }
	            }
	            }
	            else{
	                while(!s1.isEmpty()){
	                    last = s1.pop();
	                    if(last == '(')
	                        break;
	                    pst += s1.pop();
	                }
	            }
	        }
	        else{
	            pst += ch[i];
	        }
	        s1.show();
	    }
	    while(!s1.isEmpty()){
	        pst += s1.pop();
	    }
	    System.out.println(pst);
	}
}

// infix -> postfix expressions
// A + b - C * (d + e) -> 
// Ab+Cde+*-

// *
// -
// +,-,*,/,%,(,)




